$version: "1.0"

namespace aws.toolkits.samcli

/// Input to the command
structure PipelineBootstrapInput {
    /// The environment name specifying the default parameter values in the configuration file to use. Its default value is 'default'. For more information about configuration files, see: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-config.html.
    @processOption(switch: "--config-env")
    configEnv: String,

    /// The path and file name of the configuration file containing default parameter values to use. Its default value is 'samconfig.toml' in project directory. For more information about configuration files, see: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-config.html.
    @processOption(switch: "--config-file")
    configFile: String,

    /// Disable interactive prompting for bootstrap parameters, and fail if any required arguments are missing.
    @processOption(switch: "--interactive")
    interactive: Boolean,

    /// The name of the corresponding deployment stage. It is used as a suffix for the created AWS infrastructure resources.
    @processOption(switch: "--stage")
    stage: String,

    /// The Amazon Resource Name (ARN) of the IAM user having its access key ID and secret access key shared with the CI/CD system. It is used to grant this IAM user permission to access the corresponding AWS account. If not provided, the command will create one along with the access key ID and secret access key credentials.
    @processOption(switch: "--pipeline-user")
    pipelineUser: String,

    /// The ARN of the IAM role to be assumed by the pipeline user to operate on this stage. Provide it only if you want to use your own role, otherwise this command will create one.
    @processOption(switch: "--pipeline-execution-role")
    pipelineExecutionRole: String,

    /// The ARN of the IAM role to be assumed by the AWS CloudFormation service while deploying the application's stack. Provide only if you want to use your own role, otherwise the command will create one.
    @processOption(switch: "--cloudformation-execution-role")
    cloudformationExecutionRole: String,

    /// The ARN of the Amazon S3 bucket to hold the AWS SAM artifacts.
    @processOption(switch: "--bucket")
    bucket: String,

    /// If set to true and no ECR image repository is provided, this command will create an ECR image repository to hold the container images of Lambda functions having an Image package type.
    @processOption(switch: "--create-image-repository")
    createImageRepository: Boolean,

    /// The ARN of an Amazon ECR image repository to hold the container images of Lambda functions or layers that have a package type of Image. If provided, the --create-image-repository options is ignored. If not provided and --create-image-repository is specified, the command will create one.
    @processOption(switch: "--image-repository")
    imageRepository: String,

    /// Prompt to confirm if the resources are to be deployed.
    @processOption(switch: "--confirm-changeset")
    confirmChangeset: Boolean,

    /// Turn on debug logging to print debug message generated by SAM CLI and display timestamps.
    @processOption(switch: "--debug")
    debug: Boolean,

    /// Select a specific profile from your credential file to get AWS credentials.
    @processOption(switch: "--profile")
    profile: String,

    /// Set the AWS Region of the service (e.g. us-east-1).
    @processOption(switch: "--region")
    region: String,
}

/// This command generates the required AWS infrastructure resources to connect to your CI/CD system.
/// This step must be run for each deployment stage in your pipeline, prior to running the sam pipline init command.
@process(arguments: ["pipeline", "bootstrap"])
operation RunPipelineBootstrap {
    input: PipelineBootstrapInput
}
